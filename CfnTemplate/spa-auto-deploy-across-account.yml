AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create resources to automatically deploy SPA'

Parameters:
  Env:
    Type: String
    Default: stg
    AllowedValues:
      - stg
      - prd
    Description: 'Set Enter deploy Environment'

  DeployAccountId:
    Type: String
    Default: 123456789012
    AllowedValues:
      - 123456789012
      - 098765432109
    Description: 'Set Enter deploy Account ID'

  SourceAccountId:
    Type: String
    Default: 678901234567
    Description: 'Set Enter source Account ID'
  
  SpaName:
    Type: String
    Default: my-app
    AllowedValues:
      - my-app
      - my-app2
    Description: 'Set Enter SPA name'
  
  BranchName:
    Type: String
    Default: staging
    AllowedValues:
      - staging
      - master
    Description: 'Set Enter BranchName for SPA'

Resources:
  # create IAM role for pipeline
  SpaPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                 - !Sub arn:aws:s3:::${Env}-auto-deploy-${SpaName}
                 - !Sub arn:aws:s3:::${Env}-auto-deploy-${SpaName}/*
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: 
                  - '*'
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Sub arn:aws:iam::${SourceAccountId}:role/${Env}-auto-deploy-${SpaName}-for-codecommit
          PolicyName: !Sub ${Env}-auto-deploy-${SpaName}-for-pipeline
      RoleName: !Sub ${Env}-auto-deploy-${SpaName}-for-pipeline
  # create IAM role for codebuild project
  SpaCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
               - logs:*
               - cloudfront:CreateInvalidation
              Resource: 
               - '*'
            - Effect: Allow
              Action:
               - s3:*
              Resource:
               - '*'
          PolicyName: !Sub ${Env}-auto-deploy-${SpaName}-for-codebuild
      RoleName: !Sub ${Env}-auto-deploy-${SpaName}-for-codebuild
  # Create KMS key for S3 encryption
  SpaKmsKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: SPA deploy
      KeyPolicy:
        Version: '2012-10-17'
        Statement: 
          - Sid: 'Enable IAM User Permissions'
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${DeployAccountId}:root
            Action: kms:*
            Resource: '*'
          - Sid: 'Allow access for Key Administrators'
            Effect: Allow
            Principal: 
              AWS:
                - !GetAtt SpaCodeBuildRole.Arn
                - !GetAtt SpaPipelineRole.Arn
            Action: 
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
            Resource: '*'
          - Sid: 'Allow use of the key'
            Effect: Allow
            Principal: 
              AWS: 
                - !Sub arn:aws:iam::${SourceAccountId}:root
                - !GetAtt SpaCodeBuildRole.Arn
                - !GetAtt SpaPipelineRole.Arn
            Action: 
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          - Sid: 'Allow attachment of persistent resources'
            Effect: Allow
            Principal: 
              AWS: 
                - !Sub arn:aws:iam::${SourceAccountId}:root
                - !GetAtt SpaCodeBuildRole.Arn
                - !GetAtt SpaPipelineRole.Arn
            Action: 
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: '*'
            Condition: 
              Bool: 
                kms:GrantIsForAWSResource: true
  # Create artifact S3 bucket
  SpaSourceS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Env}-auto-deploy-${SpaName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault: 
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: !Ref SpaKmsKey
  # Create artifact S3 bucket policy
  SpaSourceS3BacketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref SpaSourceS3
      PolicyDocument:
        Version: '2012-10-17'
        Id: SSEAndSSLPolicy
        Statement: 
          - Sid: CrossAccountS3GetPutPolicy
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${SourceAccountId}:root
            Action: 
              - s3:Get*
              - s3:Put*
            Resource: !Sub arn:aws:s3:::${Env}-auto-deploy-${SpaName}/*
          - Sid: CrossAccountS3ListPolicy
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${SourceAccountId}:root
            Action: s3:*
            Resource: !Sub arn:aws:s3:::${Env}-auto-deploy-${SpaName}/*
          - Sid: CodePipeline
            Effect: Allow
            Principal: 
              AWS: !GetAtt SpaPipelineRole.Arn
            Action: s3:*
            Resource: !Sub arn:aws:s3:::${Env}-auto-deploy-${SpaName}/*
  # create codebuild project
  SpaCodebuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: 'Build a SPA across accounts'
      EncryptionKey: !GetAtt SpaKmsKey.Arn
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/nodejs:8.11.0'
      Name: !Sub ${Env}-auto-deploy-${SpaName}
      ServiceRole: !GetAtt SpaCodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub codebuild/buildspec.${Env}.yml
  # create codepipeline
  SpaPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${Env}-auto-deploy-${SpaName}
      ArtifactStore:
        Type: S3
        Location: !Sub ${Env}-auto-deploy-${SpaName}
        EncryptionKey:
          Id: !GetAtt SpaKmsKey.Arn
          Type: KMS
      RoleArn: !GetAtt SpaPipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - ActionTypeId:
            Category: Source
            Owner: AWS
            Provider: CodeCommit
            Version: 1
          Name: Source
          Configuration:
            BranchName: !Sub ${BranchName}
            RepositoryName: !Sub ${SpaName}
          OutputArtifacts:
          - Name: SpaSourceCode
          RoleArn: !Sub arn:aws:iam::${SourceAccountId}:role/${Env}-auto-deploy-${SpaName}-for-codecommit
          RunOrder: 1
      - Name: build
        Actions:
        - ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: 1
          Name: Build
          Configuration:
            ProjectName: !Ref SpaCodebuild
          InputArtifacts:
          - Name: SpaSourceCode
          RunOrder: 1